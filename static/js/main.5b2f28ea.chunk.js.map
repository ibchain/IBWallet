{"version":3,"sources":["common/actions.ts","common/reducer.ts","common/store.ts","common/history.ts","components/AppBar.tsx","components/BottomAppBar.tsx","pages/PageNoMatch.tsx","components/MyAsset.tsx","components/AddressAssetTable.tsx","pages/PagePay.tsx","common/wallet/getaddress.ts","common/wallet/getbalance.ts","common/wallet/getpaycode.ts","common/wallet/sendasset.ts","common/wallet/paperbalance.ts","common/wallet/claimpaperasset.ts","common/wallet/index.ts","common/IBWallet.ts","common/IBPay.ts","common/localStorage.ts","common/Amplify.ts","components/MyGoogleLogin.tsx","config/params.ts","pages/PageLogin.tsx","pages/PageAccount.tsx","pages/PrivateRoute.tsx","components/InputAsset.tsx","pages/PageTransfer.tsx","common/IBCoupon.ts","pages/PageClaim.tsx","components/PaperTable.tsx","pages/PagePaper.tsx","App.tsx","serviceWorker.ts","index.tsx","config/amplify.ts"],"names":["ActionNames","UserActions","user","type","SWITCH_USER","DELETE_PROFILE","IBWalletAction","address","SWITCH_ADDRESS","qty","UPDATE_ASSET","IBPayAction","code","UPDATE_PAY_CODE","IBCouponAction","params","Object","objectSpread","UPDATE_PAPER_INFO","log","require","debug","InitialUser","isLoggedIn","isLogout","initCouponState","IBWallet","combineReducers","state","arguments","length","undefined","action","newState","assign","paycode","asset","ibcoin","coupon","store","createStore","composeWithDevTools","hid","indexOf","window","location","hostname","basename","concat","process","browserHistory","createBrowserHistory","MyAppBar","withStyles","root","flexGrow","grow","props","classes","react","className","AppBar_default","a","position","Toolbar_default","Typography_default","variant","color","pageNames","BottomAppBar","withRouter","_theme","appBar","top","bottom","page","pathname","index_es","value","onChange","_event","history","push","scrollButtons","icon","Home_default","SupervisorAccount_default","PersonOutline_default","PageNoMatch","theme","nomatch","textAlign","margin","spacing","unit","paddingTop","paddingBottom","container","direction","justify","alignItems","item","xs","console","bind","RdxMyAsset","connect","style","display","MyAccount","component","scope","align","QRCode","Page","this","_this$props$user","add","substr","Math","min","url","href","replace","AddressAssetTable_MyAccount","PagePay_MyQr","title","React","MyQr","qrPaper","qr","PagePay","marginTop","marginBottom","marginLeft","marginRight","getAddress","Promise","resolve","reject","myInit","headers","response","API","get","then","bodyJson","catch","err","getBalance","assetName","_reject","guest_path","isArray","forEach","name","sendAsset","body","to","post","id","resId","Error","IBPay","getPaycode","getCode","res","stack","IBCoupon","paperBalance","paper_code","claimPaperAsset","info","error","dispatch","_this","classCallCheck","getMyAddress","getMyAddressSuccess","getMyAddressError","updateBalance","Hub","event","data","sendAssetSuccess","sendAssetError","fromAddress","errorMessage","updateBalanceSuccess","updateBalanceError","createClass","key","updatePaycodeSuccess","updatePaycodeError","KEY_HAVE_LOGGED_IN","getItem","defaultValue","localStorage","remove","removeItem","logger","Logger","AmplifyBridge","checkUser","Auth","currentAuthenticatedUser","checkUserSuccess","checkUserError","loadUserInfo","currentUserInfo","loadUserInfoSuccess","loadUserInfoUserError","updateAddress","getState","updatePaycode","logout","signOut","logoutSuccess","logoutError","BaseMyGoogleLogin","possibleConstructorReturn","getPrototypeOf","call","loading","onsuccess","assertThisInitialized","onfailure","googleUser","getAuthResponse","id_token","expires_at","profile","getBasicProfile","email","getEmail","getName","federatedSignIn","token","credentials","google_login","clientId","buttonText","onSuccess","onFailure","onRequest","isSignedIn","MyGoogleLogin","Login","es_Redirect","elevation","PageLogin","mixins","gutters","ReactCopyButtonWrapper","handleOnSuccessLogout","openLogoutDialog","open","setState","logoutDialogOpen","handleClickLogout","handleLogoutClose","openCopyDialog","message","copyMessage","copyDiaglogOpen","handleClose","onAfterCopy","onErrorCopy","_this$props","padding","PageAccount_AddresPaper","PageAccount_GooglePaper","onClick","PageAccount_MyDialog","PageAccount_LogoutDialog","onSuccessLogout","PageAccount","accountroot","button","mypaper","LogoutDialog","TransitionComponent","Transition","keepMounted","onClose","aria-labelledby","aria-describedby","onLogoutSuccess","render","MyDialog","AddresPaper","wordWrap","text","GooglePaper","MyRoute","timer","timeout","clearTimer","_this2","_haveLoggedIn","defVal","loggedIn","lastLoggedIn","Date","ret","JSON","stringify","parse","haveLoggedIn","setTimeout","clearTimeout","_this3","from","Component","rest","objectWithoutProperties","es_Route","PrivateRoute","routerProps","handleClickAdd","setQty","handleClickSet","check","max","handleClick","_this$state","handleChangeAddress","target","onChangeEvent","handleChangeQty","isNaN","componentWillReceiveProps","noValidate","autoComplete","required","label","textField","fullWidth","InputLabelProps","shrink","InputAsset_AddButtons","values","addButton","prefix","clickHandler","disabled","disabledButton","AddButtons","items","map","index","InputAsset_AddButton","AddButton","_onClick","apply","toString","InputAsset","flexWrap","dense","menu","width","onHubCapsule","capsule","payload","onSuccessSendAsset","onFailureSendAsset","handleClickConfirm","sendParams","disabledConfirm","dialog","dialogMessage","send","handleOnChangeAsset","closeResultDialog","resultDialog","handleCloseResultDialog","handleCancel","handleOk","sendCoinAction","onReceiveResult","result","showResultDialog","clearAsset","resultMessage","toAddress","listen","PageTransfer_MyDialog","PageTransfer_ResultDialog","ResultDialog","PageTransfer","getPaperBalance","getPaperBalanceSuccess","getPaperBalanceError","claimPaperAssetSuccess","claimPaperAssetError","paperAction","getPaperInfo","PageClaim","match","actions","PaperTable","redirect","Redirect","copuon","PaperTable_PaperTable","Link","PagePaper","App","react_default","createElement","es","Router","HashRouter","height","Switch","Route","exact","path","Boolean","LOG_LEVEL","setItem","Amplify","configure","aws_appsync_authenticationType","identityPoolId","region","userPoolId","userPoolWebClientId","endpoints","endpoint","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b2f28ea.chunk.js","sourcesContent":["/**\n * アクションクリエイター\n * \n * アクションは Store を更新するために使用します。\n * Store が更新されたことにより画面の表示が更新されます。\n * \n * Store の更新を必要としないイベント発行、処理は HUB の使用を検討します。\n */\nimport { Action } from 'redux';\n\n// -----------------------------\n// アクション名\n// -----------------------------\n\n/**\n * Sore を更新するためのアクション名\n */\nexport enum ActionNames {\n  /** Google, Cognito ユーザ情報更新 */\n  SWITCH_USER = 'SWITCH_USER',\n  /** IB Wallet アドレス更新 */\n  SWITCH_ADDRESS = 'SWITCH_ADDRESS',\n  /** 未使用 */\n  UPDATE_PROFILE = 'UPDATE_PROFILE',\n  /** ログアウト */\n  DELETE_PROFILE = 'DELETE_PROFILE',\n  /** 支払いコード更新 */\n  UPDATE_PAY_CODE = 'UPDATE_PAY_CODE',\n  /** 所有資産更新 */\n  UPDATE_ASSET = 'UPDATE_ASSET',\n  /** クーポン情報更新 */\n  UPDATE_PAPER_INFO = 'UPDATE_PAPER_INFO',\n}\n\n// -----------------------------\n// アクション作成用\n// -----------------------------\n\n/** Google, Cognito ユーザ情報更新 */\ntype UserAction = Action<ActionNames.SWITCH_USER> & { user: any }\n/** ログアウト */\ntype DeleteProfileAction = Action<ActionNames.DELETE_PROFILE>\n/** IB Wallet アドレス更新 */\ntype SwitchAddressAction = Action<ActionNames.SWITCH_ADDRESS> & { address?: string }\n/** 支払いコード更新 */\ntype UpdatePayCodeAction = Action<ActionNames.UPDATE_PAY_CODE> & { code?: string }\n/** 所有資産更新 */\ntype UpdateAssetAction = Action<ActionNames.UPDATE_ASSET> & { qty: number }\n/** クーポン情報更新 */\ntype UpdateCouponAction = Action<ActionNames.UPDATE_PAPER_INFO> & { address?: string, qty: number, code?: string }\n\nexport type Actions = UserAction | DeleteProfileAction | SwitchAddressAction | UpdatePayCodeAction | UpdateAssetAction | UpdateCouponAction\n\n/** \n * Google, Cognito ユーザ情報更新 \n * 本アプリへのログイン、ＡＰＩのアクセス権限などに関するアクション\n */\nexport const UserActions = {\n  // when user sign in / out\n  switchUser: (user: any): UserAction => {\n    return { type: ActionNames.SWITCH_USER, user }\n  },\n  // when user sign out\n  deleteProfile: (): DeleteProfileAction => {\n    return { type: ActionNames.DELETE_PROFILE }\n  },\n}\n\n/** \n * IB Wallet サービス関連の情報更新\n */\nexport const IBWalletAction = {\n  /** IB Wallet アドレス更新 */\n  switchAddress: (address?: string): SwitchAddressAction => {\n    return { type: ActionNames.SWITCH_ADDRESS, address }\n  },\n  /** 所有資産更新 */\n  updateAsset: (qty: number): UpdateAssetAction => {\n    return { type: ActionNames.UPDATE_ASSET, qty }\n  },\n}\n\n/** \n * IB Pay サービス関連の情報更新\n */\nexport const IBPayAction = {\n  /** 支払いコード更新 */\n  updatePayCode: (code: string): UpdatePayCodeAction => {\n    return { type: ActionNames.UPDATE_PAY_CODE, code }\n  },\n}\n\n/** \n * IB Coupon サービス関連の情報更新\n */\nexport const IBCouponAction = {\n  /** クーポン情報更新 */\n  updateCoupon: (params: { code: string, qty: number, address: string }): UpdateCouponAction => {\n    return { type: ActionNames.UPDATE_PAPER_INFO, ...params }\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { ActionNames, Actions } from './actions';\nlet debug = require('debug')\nlet log = debug('STORE');\n\nexport interface UserState {\n  isLoggedIn: boolean\n  isLogout: boolean\n  user?: any\n  address?: string\n  paycode?: string\n}\n\nconst InitialUser = {\n  isLoggedIn: false,\n  isLogout: false\n}\n\nfunction user(state: UserState = InitialUser, action: Actions) {\n  log('state', state, action);\n  const newState = Object.assign({}, state, { isLogout: false })\n  switch (action.type) {\n    case ActionNames.SWITCH_USER:\n      newState.user = action.user;\n      break;\n    case ActionNames.SWITCH_ADDRESS:\n      newState.address = action.address;\n      break;\n    case ActionNames.UPDATE_PAY_CODE:\n      newState.paycode = action.code;\n      break;\n    case ActionNames.DELETE_PROFILE:\n      return { isLoggedIn: false, isLogout: true };\n    default:\n      return state;\n  }\n  newState.isLoggedIn = !!newState.user && !!newState.address;\n  log('new state', newState);\n  return newState;\n}\n\nexport interface AssetState {\n  ibcoin: number\n}\n\nfunction asset(state: AssetState = { ibcoin: -1 }, action: Actions) {\n  log('asset state', state)\n  const newState = Object.assign({}, state)\n  switch (action.type) {\n    case ActionNames.UPDATE_ASSET:\n      newState.ibcoin = action.qty\n      break;\n    case ActionNames.DELETE_PROFILE:\n      return { ibcoin: -1 };\n    default:\n      return state;\n  }\n  return newState;\n}\n\nexport interface CouponState {\n  address?: string,\n  qty: number,\n  code?: string\n}\n\nconst initCouponState: CouponState = {\n  address: '', qty: 0, code: ''\n}\n\nfunction coupon(state: CouponState = initCouponState, action: Actions) {\n  log('coupon state', state)\n  log('coupon action', action)\n  const newState = Object.assign({}, state)\n  switch (action.type) {\n    case ActionNames.UPDATE_PAPER_INFO:\n      const { address, code, qty } = action;\n      newState.address = address;\n      newState.code = code;\n      newState.qty = qty;\n      break;\n    default:\n      return state;\n  }\n  log('coupon new state', newState)\n  return newState;\n}\n\nexport type State = {\n  user: UserState,\n  asset: AssetState,\n  coupon: CouponState,\n}\n\nexport const IBWallet = combineReducers({\n  user, asset, coupon\n});\n","import { createStore } from \"redux\";\nimport { IBWallet } from \"./reducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst store = createStore(\n  IBWallet,\n  composeWithDevTools() // Chrome 拡張機能（Redux DevTools Extension) 用\n);\n\nexport default store;\n","import { createBrowserHistory } from \"history\";\n\nconst hosts = ['localhost:3000', 'localhost:8080', 'caldia-apps.github.io', 'd2otoqn9rs8n0r.cloudfront.net', 'ibchain.github.io']\nconst hid = hosts.indexOf(window.location.hostname)\nconst bases = ['', '', '/IBWallet', '', `${process.env.PUBLIC_URL}`]\nconst basename = bases[hid]\nconst browserHistory = createBrowserHistory({ basename });\n\nexport default browserHistory;","import * as React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n};\n\nconst ButtonAppBar: React.FC<{ classes: any }> = (props) => {\n\n  const { classes } = props\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            IB Wallet\n            </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\n\nexport const MyAppBar = withStyles(styles)(ButtonAppBar)\n","import * as React from 'react'\nimport { withStyles } from '@material-ui/core/styles'\nimport { Tabs, Tab } from '@material-ui/core'\nimport AppBar from '@material-ui/core/AppBar'\nimport Home from '@material-ui/icons/Home'\nimport PersonOutline from '@material-ui/icons/PersonOutline'\nimport SupervisorAccount from '@material-ui/icons/SupervisorAccount'\nimport { withRouter } from 'react-router-dom'\n\nlet debug = require('debug')\nlet log = debug('BottomAppBar');\n\nconst styles = (_theme: any): any => {\n  return ({\n    appBar: {\n      top: 'auto',\n      bottom: 0,\n    },\n  });\n}\n\nconst pageNames = ['/pay', '/transfer', '/account' ]\n\ninterface MyProps {\n  classes: any\n  history: any\n  location: any\n}\n\nconst MyComponent: React.FC<MyProps> = (props) => {\n\n  const { classes } = props\n  const page = pageNames.indexOf(props.location.pathname)\n  const handleChange = (_event: React.ChangeEvent<{}>, value: any): void => {\n    props.history.push(pageNames[value])\n  }\n  log(`page no ={ ${page} }`)\n  // if (page < 0) {\n  //   return <div></div>\n  // }\n  return (\n    <React.Fragment>\n      <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n        <Tabs value={page} onChange={handleChange} variant=\"fullWidth\" scrollButtons=\"off\">\n          <Tab icon={<Home />} />\n          {/* <Tab icon={<Payment />} /> */}\n          <Tab icon={<SupervisorAccount />} />\n          <Tab icon={<PersonOutline />} />\n        </Tabs>\n      </AppBar>\n    </React.Fragment>\n  )\n}\n\n\nexport const BottomAppBar = withRouter(withStyles(styles)(MyComponent) as any)\n","//\n// NoMatch Page\n// path: none\n//\n\nimport * as React from 'react'\nimport { Grid, Typography, withStyles, Paper } from '@material-ui/core'\n\nconst styles: any = (theme: any) => ({\n  nomatch: {\n    textAlign: 'center',\n    margin: theme.spacing.unit * 2,\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2\n  }\n})\n\ninterface PageProps {\n  classes: any\n}\n\nconst Page: React.FC<PageProps> = (props) => {\n\n  const { classes } = props\n\n  return (\n    <Grid\n      container\n      direction='column'\n      justify=\"space-between\"\n      alignItems=\"stretch\">\n      <Grid item xs={12}>\n        <Paper className={classes.nomatch} >\n          <Typography variant=\"body1\" color=\"inherit\">指定されたページは見つかりません</Typography>\n        </Paper>\n      </Grid>\n    </Grid>\n  )\n}\n\n\n// ---------------------------------------------\n// Component\n// ---------------------------------------------\n\n\n// ---------------------------------------------\n// Redux, Material-UI\n// ---------------------------------------------\n\nexport const PageNoMatch = withStyles(styles)(Page)","/* reactとreact-domの読み込み */\nimport * as React from 'react'\n// import store from '../store'\n// import { MyState as WalletState } from '../modules/wallet/Reducer'\nimport { connect } from 'react-redux'\n// import { ActionNames } from '../modules/background/ActionsNames';\nimport { isArray } from 'util';\n// import { ActionNames } from '../modules/wallet/ActionDispatcher';\n\nlet debug = require('debug')\nlet log = debug('MyAsset:log');\nlog.log = console.log.bind(console);\n\n\n\n/**\n * 資産表示コンポーネントのプロパティ\n *\n * @interface MyProps\n */\ninterface MyProps {\n  asset: {ibcoin: number}\n}\n/**\n * 資産表示コンポーネント\n *\n * @class MyAsset\n * @extends {React.Component<MyProps>}\n */\nconst MyAsset: React.FC<MyProps> = (props) => {\n\n  log(\"render\", props)\n\n  const { asset } = props\n\n  if (asset.ibcoin < 0) {\n    return (\n      <div style={{ display: 'inline' }}>{'更新中'}</div>\n    )\n  }\n  const { ibcoin } = asset\n  return (\n    <div style={{ display: 'inline' }}>{ibcoin}</div>\n  )\n}\n\nconst mapState = (state: any) => {\n  log(\"mapState\", state)\n  return ({\n    // mystate: state.mystate\n    asset: state.asset\n  })\n}\n\n// function getAsset(assets: Array<any>, assetName: string): string {\n//   log('getAsset[ ' + assetName + ' ]')\n\n//   if (!assetName) return 'NO DATA[E010]'\n//   if (!isArray(assets)) return 'NO DATA[E100]'\n\n//   let _assets = assets.filter((value: any) => {\n//     return (value && value.name === assetName)\n//   }\n//   )\n\n//   log('assets = ', _assets)\n//   if (!_assets || _assets.length <= 0) return 'NO DATA'\n\n//   if (0 < _assets.length) {\n//     let asset = _assets[0]\n//     if (!asset) {\n//       asset = _assets[_assets.length - 1]\n//     }\n//     return '' + asset.qty\n//   } else {\n//     return '0'\n//   }\n// }\n\n\n/** 資産表示コンポーネント */\nexport const RdxMyAsset = connect(mapState)(MyAsset)\n","import * as React from 'react'\nimport { Table, TableBody, TableRow, TableCell } from \"@material-ui/core\";\n\nimport { RdxMyAsset as MyAsset } from \"./MyAsset\";\n\nexport const MyAccount: React.FC<{ address: string }> = (props) => {\n  const { address } = props\n  return (\n    <Table>\n      <TableBody>\n        <TableRow>\n          <TableCell component='th' scope=\"row\">Address</TableCell >\n          <TableCell align='right'>{address}</TableCell >\n        </TableRow>\n        <TableRow>\n          <TableCell component='th' scope=\"row\">Asset</TableCell >\n          <TableCell align='right'><MyAsset /></TableCell >\n        </TableRow>\n      </TableBody>\n    </Table>\n  )\n}\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { Grid, Paper, Typography, withStyles } from '@material-ui/core'\nimport { UserState, State } from '../common/reducer';\nimport { MyAccount } from '../components/AddressAssetTable';\n\nlet QRCode = require('qrcode.react')\n\nlet debug = require('debug')\nlet log = debug('[PAGE]{/pay}');\n\nconst styles: any = (theme: any) => ({\n  qrPaper: {\n    textAlign: 'center',\n    margin: theme.spacing.unit * 2,\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2\n  },\n  qr: {\n    display: 'block',\n    marginTop: theme.spacing.unit * 2,\n    marginBottom: theme.spacing.unit * 2,\n    marginLeft: 'auto',\n    marginRight: 'auto'\n  }\n})\n\ninterface MapProps {\n  user: UserState\n}\n\n\ninterface PageProps {\n  classes: any\n}\n\nclass Page extends React.Component<PageProps & MapProps, {}> {\n\n  render() {\n    const { classes } = this.props\n    const { address, paycode } = this.props.user\n    let add = ''\n    if (address) {\n      add = address.substr(0, Math.min(address.length, 10)) + '.....'\n    }\n\n    const url = window.location.href.replace('/pay', '') +\n      ((): string => {\n        if (!!paycode) {\n          return `/claim/${paycode}/`\n        } else if (!!address) {\n          return `/paper/${address}/`\n        }\n        return '/login'\n      })()\n\n    log('QR', url)\n    return (\n      <Grid\n        container\n        direction='column'\n        justify=\"space-between\"\n        alignItems=\"stretch\">\n        <Grid item xs={12}>\n          <MyAccount address={add} />\n        </Grid>\n        <Grid item xs={12}>\n          <MyQr classes={classes} code={url} title=\"支払いコード\" />\n        </Grid>\n      </Grid>\n    )\n  }\n\n}\n\n// ---------------------------------------------\n// Component\n// ---------------------------------------------\n\nconst MyQr: React.FC<{ classes: any, code: string, title: string }> = (props) => {\n  const { classes } = props\n  return (\n    <Paper className={classes.qrPaper} >\n      <Typography variant=\"body1\" color=\"inherit\">{props.title}</Typography>\n      <QRCode value={props.code} className={classes.qr} />\n    </Paper>\n  );\n}\n\n\n// ---------------------------------------------\n// Redux\n// ---------------------------------------------\n\nconst mapState = (state: State): MapProps => {\n  // log(\"mapState\", state)\n  return ({\n    user: state.user\n  })\n}\n\nexport const PagePay = withStyles(styles)(connect(mapState)(Page))","import { API } from 'aws-amplify';\n\nlet debug = require('debug')\nlet log = debug('[getAddress]')\n\nexport function getAddress(): Promise<string> {\n\n  return new Promise((resolve, reject) => {\n    log(\"アドレス取得のAPIを呼び出します\")\n    let apiName = 'IBCoin_User';\n    let guest_path = '/address';\n    let myInit = { // OPTIONAL\n      headers: {},\n      response: false // OPTIONAL (return the entire Axios response object instead of only response.data)\n    }\n    API.get(apiName, guest_path, myInit)\n      .then(response => {\n\n        log('API.get', apiName, guest_path, myInit, response)\n        let bodyJson = response['body-json']\n        let address = ''\n        if (bodyJson) {\n          address = bodyJson\n          resolve(address);\n        }\n      })\n      .catch(err => {\n        log('[ERR] API.get', apiName, guest_path, myInit, err)\n        reject(err);\n      });\n\n  })\n}\n","import { API } from 'aws-amplify';\nimport { isArray } from 'util';\n\nlet debug = require('debug')\nlet log = debug('[getBalance]')\n\nexport function getBalance(address: string, assetName='ibcoin'): Promise<number> {\n\n  return new Promise((resolve, _reject) => {\n\n    let apiName = 'IBCoin_User';\n    let guest_path = '/assets?address=' + address;\n    let myInit = { // OPTIONAL\n      headers: {},\n      response: false // OPTIONAL (return the entire Axios response object instead of only response.data)\n    }\n    API.get(apiName, guest_path, myInit)\n      .then(response => {\n\n        log('API.get', apiName, guest_path, myInit, response)\n        let bodyJson = response['body-json']\n        if (isArray(bodyJson)) {\n          // bodyJson = [{name: \"ibcoin\", assetref: \"60-512-12884\", qty: 9999621981}]\n          // this.dispatch(onSuccessGetBalances(bodyJson))\n          bodyJson.forEach(asset => {\n            log(asset)\n            if (asset.name === assetName) {\n              return resolve(asset.qty);\n            }\n          });\n        } else {\n          log('body json is not array', bodyJson)\n        }\n        return resolve(0)\n      })\n      .catch(err => {\n        log('[ERR] API.get', apiName, guest_path, myInit, err)\n        return resolve(0)\n      });\n\n  })\n}","\nimport { API } from 'aws-amplify';\n\nlet debug = require('debug')\nlet log = debug('[getPaycode]')\n\nexport function getPaycode(): Promise<string> {\n\n  return new Promise((resolve, reject) => {\n\n    log('getPaycode()')\n    let apiName = 'IBCoin_User';\n    let guest_path = '/paper';\n    let myInit = {\n      headers: {},\n      response: false,\n      body: {\n        getCode: true\n      }\n    }\n    API.post(apiName, guest_path, myInit)\n      .then(response => {\n\n        log('API.post', apiName, guest_path, myInit)\n        log('API.post > response =', response)\n        return response\n      })\n      .then((res: any) => {\n        log('res', res)\n        // this.dispatch(onSuccessGetPayCode(res.code))\n        resolve(res.code)\n      })\n      .catch(err => {\n        log('[ERR] API.put', apiName, guest_path, myInit, err)\n        log(err, err.stack);\n        // this.dispatch(onSuccessGetPayCode(''))\n        reject(err)\n      });\n  })\n\n}","\nimport { API } from 'aws-amplify';\n\nlet debug = require('debug')\nlet log = debug('[getPaycode]')\n\nexport interface SendAssetParams {\n  to: string\n  qty: number\n  assetName: string\n  fromAddress: string\n}\nexport interface SendAssetSuccess \n{ to: string, qty: number, resId: number }\n\nexport function sendAsset(params: SendAssetParams): Promise<{ to: string, qty: number, resId: number }> {\n\n  return new Promise((resolve, reject) => {\n\n    log(\"sendAsset\", params)\n\n    let apiName = 'IBCoin_User';\n    let guest_path = '/assets';\n    let myInit = { // OPTIONAL\n      headers: {},\n      response: false, // OPTIONAL (return the entire Axios response object instead of only response.data)\n      // body: \"to=\" + to + \"&qty=\" + qty + \"&assetName=\" + assetName\n      body: {\n        to: params.to,\n        qty: params.qty,\n        assetName: params.assetName\n      }\n    }\n    API.post(apiName, guest_path, myInit)\n      .then(response => {\n\n        log('API.post', apiName, guest_path, myInit)\n        log('API.post > response =', response)\n        // 成功した場合 response はトランザクションID文字列のみが返ってくる\n        let id = response\n        if (id) {\n          // this.dispatch(onSuccessSendAsset({ to: params.to, qty: params.qty, resId: id }))\n          return resolve({ to: params.to, qty: params.qty, resId: id })\n        } else {\n          // this.dispatch(onFailureSendAsset(new Error('UNKNOWN ERROR')))\n          return reject(new Error('UNKNOWN ERROR'))\n        }\n        // return params.fromAddress\n      })\n      .catch(err => {\n        log('[ERR] API.put', apiName, guest_path, myInit, err)\n        // log(err, err.stack);\n        // this.dispatch(onFailureSendAsset(err))\n        return reject(err)\n      });\n  })\n\n}\n","import { API } from 'aws-amplify';\n\nlet debug = require('debug')\nlet log = debug('[paperBalance]')\n\n/**\n * ペーパーアカウントにある資産取得\n * @param code \n */\nexport function paperBalance(code: string): Promise<{ code: string, address: string, qty: number }> {\n\n  return new Promise((resolve, reject) => {\n\n    log(\"paperBalance\", code)\n\n    let apiName = 'IBCoin_User';\n    let guest_path = '/paper';\n    let myInit = { // OPTIONAL\n      headers: {\n        'paper_code': code\n      },\n      response: false, // OPTIONAL (return the entire Axios response object instead of only response.data)\n      // body: \"to=\" + to + \"&qty=\" + qty + \"&assetName=\" + assetName\n      body: {\n        // code: code\n      }\n    }\n    API.get(apiName, guest_path, myInit)\n      .then(response => {\n\n        log('API.get', apiName, guest_path, myInit)\n        log('API.get > response =', response)\n        return response\n      })\n      .then((res: any) => {\n        log('res', res)\n        // this.dispatch(onSuccessGetPaperInfo(code, res.address, res.qty))\n        const { address, qty } = res\n        resolve({ code, address, qty })\n      })\n      .catch(err => {\n        log('[ERR] API.get', apiName, guest_path, myInit, err)\n        log(err, err.stack);\n        // this.dispatch(onSuccessGetPaperInfo(code, \"error\", 0))\n        reject(err)\n      });\n  })\n\n}\n","import { API } from 'aws-amplify';\n\nlet debug = require('debug')\nlet log = debug('[paperBalance]')\n\n/**\n   * ペーパーアカウントの資産を自分のアカウントに送金\n   * @param code \n   */\nexport function claimPaperAsset(code: string, qty: number = 0) {\n  return new Promise((resolve, reject) => {\n\n    log(\"claimPaperAsset\", code)\n\n    let apiName = 'IBCoin_User';\n    let guest_path = '/paper';\n    let myInit = { // OPTIONAL\n      headers: {},\n      response: false, // OPTIONAL (return the entire Axios response object instead of only response.data)\n      // body: \"to=\" + to + \"&qty=\" + qty + \"&assetName=\" + assetName\n      body: {\n        code, qty\n      }\n    }\n    API.post(apiName, guest_path, myInit)\n      .then(response => {\n\n        log('API.post', apiName, guest_path, myInit)\n        log('API.post > response =', response)\n        return response\n      })\n      .then((res: any) => {\n        log('res', res)\n        // this.getBalances(res.sendTo)\n        // this.dispatch(onSuccessPaperAsset(res))\n        resolve(res)\n      })\n      .catch(err => {\n        log('[ERR] API.put', apiName, guest_path, myInit, err)\n        log(err, err.stack);\n        // this.dispatch(onSuccessPaperAsset({ sendTo: \"err\", qty: 0 }))\n        // this.dispatch(onFailureSendAsset(err))\n        reject(err)\n      });\n  })\n}\n","import { getAddress } from './getaddress';\nimport { getBalance } from './getbalance';\nimport { getPaycode } from './getpaycode';\nimport { sendAsset } from './sendasset';\nimport { paperBalance } from './paperbalance';\nimport { claimPaperAsset } from './claimpaperasset';\n\nexport const IBWallet = {\n  getAddress,\n  getBalance,\n  sendAsset,\n}\n\nexport const IBPay = {\n  getPaycode,\n}\n\nexport const IBCoupon = {\n  paperBalance,\n  claimPaperAsset\n}\n\nexport const IBExplore = {\n\n}","import { IBWallet as API } from './wallet'\nimport { IBWalletAction, Actions } from './actions';\nimport { Dispatch } from 'redux';\nimport { Hub } from 'aws-amplify';\nimport { SendAssetParams, SendAssetSuccess } from './wallet/sendasset';\n\nlet debug = require('debug')\nlet info = debug('IBWallet[INFO]');\nlet error = debug('IBWallet[ERR]');\n\n/**\n * IB Wallet\n *\n * @export\n * @class IBWallet\n */\nexport class IBWallet {\n\n  /**\n   * dispatch\n   *\n   * @private\n   * @type {Dispatch<Actions>}\n   * @memberof IBWallet\n   */\n  private dispatch: Dispatch<Actions>;\n\n  /**\n   * Creates an instance of IBWallet.\n   * @param {Dispatch<Actions>} dispatch\n   * @memberof IBWallet\n   */\n  constructor(dispatch: Dispatch<Actions>) {\n    this.dispatch = dispatch;\n  }\n\n  /**\n   * 1. IB Wallet アドレス取得\n   *\n   * @memberof IBWallet\n   */\n  public getMyAddress = (): Promise<any> => {\n    return API.getAddress()\n      .then((address: string) => this.getMyAddressSuccess(address)) // 1.1\n      .catch((err: any) => this.getMyAddressError(err))          // 1.2\n  }\n\n  /**\n   * 1.1 成功）IB Wallet アドレス取得\n   *\n   * @private\n   * @memberof IBWallet\n   */\n  private getMyAddressSuccess = (address: string) => {\n    info('get address success', address);\n    // Store 更新\n    this.dispatch(IBWalletAction.switchAddress(address))\n\n    // 資産更新\n    this.updateBalance(address);  // 3\n  }\n\n  /**\n   * 1.2 失敗）IB Wallet アドレス取得\n   *\n   * @private\n   * @memberof IBWallet\n   */\n  private getMyAddressError = (err: any) => {\n    error('get address error', err);\n    this.dispatch(IBWalletAction.switchAddress(undefined))\n  }\n\n  /**\n   * 2. 送金\n   *\n   * @memberof IBWallet\n   */\n  public sendAsset = (params: SendAssetParams) => {\n    Hub.dispatch('sendAsset', { event: 'start', data: params }, 'IBWallet');\n    API.sendAsset(params)\n      .then((value: any) => this.sendAssetSuccess(params, value))  // 2.1\n      .catch((err: any) => {\n        this.sendAssetError(err)  // 2.2\n        this.updateBalance(params.fromAddress) // 3\n      })\n  }\n\n  /**\n   * 2.1 成功）送金\n   *\n   * @private\n   * @memberof IBWallet\n   */\n  private sendAssetSuccess = (params: SendAssetParams, value: SendAssetSuccess) => {\n    info('sendAssetSuccess', params, value)\n    // 通信は成功したが、送金が成功しているとは限らない\n    // resId が文字列であれば送金成功\n    const resId = value.resId\n    // resId がオブジェクトで errorMessage を取得できる場合は送金失敗\n    if (resId && (resId as any).errorMessage) {\n      Hub.dispatch('sendAsset', { event: 'error', errorMessage: (resId as any).errorMessage }, 'IBWallet');\n    } else {\n      Hub.dispatch('sendAsset', { event: 'success', data: { params, value } }, 'IBWallet');\n    }\n    // 資産更新\n    this.updateBalance(params.fromAddress); // 3\n  }\n\n  /**\n   * 2.2 失敗）送金\n   *\n   * @private\n   * @memberof IBWallet\n   */\n  private sendAssetError = (err: any) => {\n    Hub.dispatch('sendAsset', { event: 'error', errorMessage: err }, 'IBWallet');\n    error(err)\n  }\n\n  /**\n   * 3. 資産更新\n   *\n   * @memberof IBWallet\n   */\n  public updateBalance = (address: string) => {\n    // 資産更新\n    API.getBalance(address)\n      .then(this.updateBalanceSuccess)  // 3.1\n      .catch(this.updateBalanceError)   // 3.2\n  }\n\n  /**\n   * 3.1 成功）資産更新\n   *\n   * @private\n   * @memberof IBWallet\n   */\n  private updateBalanceSuccess = (qty: number) => {\n    info('update balance success', qty)\n    // Store 更新\n    this.dispatch(IBWalletAction.updateAsset(qty));\n  }\n  /**\n   * 3.2 失敗）資産更新\n   *\n   * @private\n   * @memberof IBWallet\n   */\n  private updateBalanceError = (err: any) => {\n    error('update balance  ERR', err);\n    // Store 更新\n    this.dispatch(IBWalletAction.updateAsset(0));\n  }\n}\n","import { IBPay as API } from './wallet'\nimport { IBPayAction } from './actions';\n\nlet debug = require('debug')\nlet info = debug('IBPay[INFO]');\nlet error = debug('IBPay[ERR]');\n\nexport class IBPay {\n\n  private dispatch: any;\n\n  constructor(dispatch: any) {\n    this.dispatch = dispatch;\n  }\n\n  public updatePaycode(): Promise<any> {\n    return API.getPaycode()\n      .then(code => this.updatePaycodeSuccess(code))\n      .catch(err => this.updatePaycodeError(err))\n  }\n\n  private updatePaycodeSuccess(code: string) {\n    info('update PayCode success', code);\n    this.dispatch(IBPayAction.updatePayCode(code));\n    return code\n  }\n  private updatePaycodeError(err: any) {\n    error('update PayCode error', err);\n    this.dispatch(IBPayAction.updatePayCode(''));\n    return ''\n  }\n}","// debug\nlet debug = require('debug')\nlet log = debug('helpers/localStorage')\nlog.log = console.log.bind(console)\n\nconst KEY_HAVE_LOGGED_IN = 'helpers/KEY_HAVE_LOGGED_IN'\nconst KEY_ADDRESS = 'helpers/KEY_ADDRESS'\n/**\n * Cognito ログイン成功\n *\n * @export\n * @interface HaveLoggedIn\n */\nexport interface HaveLoggedIn {\n  /**\n   * ログイン成功フラグ\n   *\n   * @type {boolean}\n   * @memberof HaveLoggedIn\n   */\n  loggedIn: boolean\n  /**\n   * 最終ログイン日時\n   *\n   * @type {Date}\n   * @memberof HaveLoggedIn\n   */\n  lastLoggedIn: Date\n}\n\n/**\n * 過去にCognitoログインに成功したことがあるか？\n * 成功したことがある場合は true\n * ログアウト時にフラグは削除\n *\n * @export\n * @returns {boolean}\n */\nexport function haveLoggedIn(): HaveLoggedIn {\n  const defVal: HaveLoggedIn = {\n    loggedIn: false,\n    lastLoggedIn: new Date(0)\n  }\n  const ret = getItem(KEY_HAVE_LOGGED_IN, JSON.stringify(defVal))\n  return Object.assign(defVal, JSON.parse(ret))\n}\n\n/**\n * Cogtnito ログインフラグ削除\n *\n * @export\n */\nexport function removeLoggedInFlag(): void {\n  remove(KEY_HAVE_LOGGED_IN)\n}\n\n/**\n * Cognito ログインフラグ保存\n *\n * @export\n * @param {boolean} [value=true]\n */\nexport function setHaveLoggedIn(value: boolean = true): void {\n  let val: HaveLoggedIn = {\n    loggedIn: value,\n    lastLoggedIn: new Date()\n  }\n  setItem(KEY_HAVE_LOGGED_IN, JSON.stringify(val))\n}\n\nexport interface Address {\n  address?: string\n  lastUpdate?: Date\n}\n\nexport function getAddress(): Address {\n  const val: Address = {\n    address: undefined,\n    lastUpdate: undefined\n  }\n  const defVal = JSON.stringify(val)\n  const res = getItem(KEY_ADDRESS, defVal)\n  const resVal = JSON.parse(res)\n  return Object.assign({}, defVal, resVal)\n}\n\nexport function setAddress(address: string): void {\n  const val: Address = {\n    address: address,\n    lastUpdate: new Date()\n  }\n  setItem(KEY_ADDRESS, JSON.stringify(address))\n}\n\nexport function removeAddress(): void {\n  remove(KEY_ADDRESS)\n}\n\nexport const address = {\n  set: setAddress,\n  get: getAddress,\n  remove: removeAddress\n}\n\n/**\n * ローカルストレージに値を書き込む\n *\n * @param {string} key\n * @param {*} value\n */\nfunction setItem(key: string, value: any) {\n  if (!!localStorage && !!localStorage.setItem) {\n    log('setItem()', key, value)\n    localStorage.setItem(key, value)\n  } else {\n    log('ERR: localStorage is unabailable')\n  }\n}\n\nfunction getItem(key: string, defaultValue: any = undefined): any {\n  if (!!localStorage && !!localStorage.getItem) {\n    log('getItem()', key)\n    let value = localStorage.getItem(key)\n    if (!!value) {\n      log('getItem() => ', value)\n      return value\n    }\n  } else {\n    log('ERR: localStorage is unabailable')\n  }\n  log('getItem() defaultValue => ', defaultValue)\n  return defaultValue\n}\n\nfunction remove(key: string): void {\n  if (!!localStorage && !!localStorage.getItem) {\n    log('remove()', key)\n    localStorage.removeItem(key)\n  } else {\n    log('ERR: localStorage is unabailable')\n  }\n}","import { Auth, Logger } from 'aws-amplify';\nimport { UserActions, Actions } from './actions';\nimport { IBWallet } from './IBWallet';\nimport { IBPay } from './IBPay';\nimport { Store } from 'redux';\nimport { State } from './reducer';\nimport { removeLoggedInFlag } from './localStorage';\n\nconst logger = new Logger('AmplifyBridge');\n\n/**\n * AWS Amplify に関する処理\n *\n * @export\n * @class AmplifyBridge\n */\nexport class AmplifyBridge {\n\n  /**\n   * Store\n   * \n   * @private\n   * @type {Store<State, Actions>}\n   * @memberof AmplifyBridge\n   */\n  private store: Store<State, Actions>;\n\n  /**\n   * Creates an instance of AmplifyBridge.\n   * @param {Store<State, Actions>} store Store 更新、State 取得のために使用\n   * @memberof AmplifyBridge\n   */\n  constructor(store: Store<State, Actions>) {\n    this.store = store;\n  }\n\n  /**\n   * 1. ログイン中のユーザ情報を確認\n   *\n   * @memberof AmplifyBridge\n   */\n  public checkUser = () => {\n    Auth.currentAuthenticatedUser()\n      .then((user: any) => this.checkUserSuccess(user)) // 1.1\n      .catch((err: any) => this.checkUserError(err)); // 1.2\n  }\n\n  /**\n   * 1.1 成功）ログイン中のユーザ情報を確認\n   *\n   * @private\n   * @memberof AmplifyBridge\n   */\n  private checkUserSuccess = (user: any) => {\n    logger.info('check user success', user);\n    this.loadUserInfo(user);                  // 2\n  }\n\n  /**\n   * 1.2 失敗）ログイン中のユーザ情報を確認\n   *\n   * @private\n   * @memberof AmplifyBridge\n   */\n  private checkUserError = (err: any) => {\n    logger.info('check user error', err);\n    // Store からユーザ情報削除\n    // this.store.dispatch(UserActions.switchUser(null)); // deleteProfile でユーザ情報は削除される\n\n    // Store からデータを削除し、ログアウトフラグを設定\n    this.store.dispatch(UserActions.deleteProfile());\n  }\n\n  /**\n   * 2. Cognito ユーザ情報取得\n   *\n   * @private\n   * @memberof AmplifyBridge\n   */\n  private loadUserInfo = (user: any) => {\n    Auth.currentUserInfo()\n      .then((info: any) => this.loadUserInfoSuccess(user, info))   // 2.1\n      // ログイン情報が取得できているので、ユーザ情報が取得できる。想定されないエラー\n      .catch((err: any) => this.loadUserInfoUserError(user, err)); // 2.2 \n  }\n  /**\n   * 2.1 成功）Cognito ユーザ情報取得\n   *\n   * @private\n   * @memberof AmplifyBridge\n   */\n  private loadUserInfoSuccess = (user: any, info: any) => {\n\n    logger.info('load user info success', user, info);\n    // ログイン情報とユーザ情報を合わせて\n    Object.assign(user, info);\n    // Store に保存\n    this.store.dispatch(UserActions.switchUser(user));\n\n    // IB Wallet アドレスを更新\n    this.updateAddress(); // 3\n  }\n\n  /**\n   * 2.2 失敗）Cognito ユーザ情報取得\n   *\n   * @private\n   * @memberof AmplifyBridge\n   */\n  private loadUserInfoUserError = (user: any, err: any): any => {\n    logger.error('load user info success', user, err);\n    throw new Error(\"Method not implemented.\");\n  }\n\n\n  /**\n   * 3. IB Wallet アドレス更新\n   *\n   * @private\n   * @memberof AmplifyBridge\n   */\n  private updateAddress = () => {\n\n    // 取得済みであれば更新する必要はない\n    const state = this.store.getState();\n    if (state.user && !state.user.address) {\n      logger.info('アドレスを更新します・・・・・・・・・・・・・・・・・')\n      new IBWallet(this.store.dispatch).getMyAddress()\n        .then(() => this.updatePaycode()); // 4\n    }\n  }\n\n  /**\n   * 4. 支払いコード更新\n   *\n   * @private\n   * @memberof AmplifyBridge\n   */\n  private updatePaycode = () => {\n    logger.info('支払いコードを更新します・・・・・・・・・・・・・・・・・')\n\n    new IBPay(this.store.dispatch).updatePaycode()\n      .then((code: string) => logger.info('IBPay.updatePaycode result > ', code))\n  }\n\n  /**\n   * 10. ログアウト\n   *\n   * @memberof AmplifyBridge\n   */\n  public logout = () => {\n    removeLoggedInFlag()\n    Auth.signOut()\n    .then(this.logoutSuccess)   // 10.1\n    .catch(this.logoutError)    // 10.2\n  }\n\n  /**\n   * 10.1 成功）ログアウト\n   *\n   * @private\n   * @memberof AmplifyBridge\n   */\n  private logoutSuccess = (value: any) => {\n    logger.info('ログアウト', value)\n\n    // Store の情報を削除し、ログアウトフラグを設定\n    this.store.dispatch(UserActions.deleteProfile())\n  }\n\n  /**\n   * 10.2 失敗）ログアウト\n   *\n   * @private\n   * @memberof AmplifyBridge\n   */\n  private logoutError = (err: any) => {\n    // ここが呼び出されることはないだろうが、ログアウト処理を続行する\n    logger.error('ログアウトエラー', err)\n\n    // Store の情報を削除し、ログアウトフラグを設定\n    this.store.dispatch(UserActions.deleteProfile())\n  }\n}\n\n","import * as React from 'react';\nimport { connect } from 'react-redux'\nimport { GoogleLogin } from 'react-google-login'\nimport { Auth } from 'aws-amplify';\nimport { State } from '../common/reducer';\nimport { googleClientId } from '../config/params';\nimport { AmplifyBridge } from '../common/Amplify';\nimport store from '../common/store';\n\nlet debug = require('debug');\nlet log = debug('MyGoogleLogin');\n\ninterface MapStateProps {\n\n}\n\ntype MyProps = MapStateProps;\n\nclass BaseMyGoogleLogin extends React.Component<MyProps, {}> {\n\n\n  constructor(props: MyProps) {\n    super(props);\n    this.onsuccess = this.onsuccess.bind(this)\n    this.onfailure = this.onfailure.bind(this)\n    this.loading = this.loading.bind(this)\n  }\n\n  // コンポーネントがマウントされた時に呼ばれる\n  componentDidMount() {\n    log('componentDidMount')\n    // ログイン処理開始イベント発光\n    // this.props.actions.startGoogleLogin()\n  }\n  componentDidCatch(error: any, info: any) {\n    log('componentDidCatch: ', error, info)\n  }\n  // Google ログインが成功した時に呼び出される\n  async onsuccess(googleUser: any) {\n    log('onsuccess: ', googleUser)\n    const { id_token, expires_at } = googleUser.getAuthResponse();\n    const profile = googleUser.getBasicProfile();\n    let user = {\n        email: profile.getEmail(),\n        name: profile.getName()\n    };\n    \n    const credentials = await Auth.federatedSignIn(\n        'google',\n        { token: id_token, expires_at },\n        user\n    );\n    log('credentials', credentials);\n    // setHaveLoggedIn()\n    new AmplifyBridge(store).checkUser()\n}\n\n  // Google ログインが失敗した時に呼び出される\n  onfailure(response: any) {\n    log('onfailure: ', response)\n    if (response && response.error) {\n      if (response.error === 'popup_closed_by_user') {\n        // TODO: ログイン処理中断をユーザーに案内する\n      }\n    }\n  }\n\n  // Google ログアウトが完了した時に呼び出される\n  logout = () => {\n    log('logout: ')\n  }\n\n  // Google ログイン画面が表示されるときに呼び出される\n  loading = () => {\n    log('loading: ')\n  }\n  render() {\n    return (\n      // <div style={{ display: 'none' }}>\n        <GoogleLogin\n          clientId={googleClientId}\n          buttonText=\"新規登録、ログイン\"\n          scope={\"\"}\n          onSuccess={this.onsuccess}\n          onFailure={this.onfailure}\n          onRequest={this.loading}\n          isSignedIn\n        />\n      // </div>\n    )\n  }\n}\nconst mapState = (state: State) => {\n  log(\"mapState\", state)\n  return ({\n    // login: state.login\n  })\n}\n\nconst mapDispatch = (dispatch: any) => {\n  log(\"mapDispatch\", dispatch)\n  return ({\n    // actions: new ActionDispatcher(dispatch)\n  })\n}\n\nexport const MyGoogleLogin = connect(mapState, mapDispatch)(BaseMyGoogleLogin)\n","export const googleClientId = \"899691769798-mknl4rtaosbgojomvs5u82k36ut4qcd2.apps.googleusercontent.com\";\n","import * as React from 'react';\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { Paper, withStyles, Typography } from '@material-ui/core'\nimport { UserState, State } from '../common/reducer';\nimport { MyGoogleLogin } from '../components/MyGoogleLogin';\n\nlet debug = require('debug')\nlet log = debug('[PAGE]{/login}');\n\nconst styles = (theme: any) => {\n  return ({\n    root: {\n      ...theme.mixins.gutters(),\n      paddingTop: theme.spacing.unit * 2,\n      paddingBottom: theme.spacing.unit * 2,\n      textAlign: 'center',\n      marginTop: theme.spacing.unit * 4,\n      marginLeft: theme.spacing.unit * 2,\n      marginRight: theme.spacing.unit * 2,\n    },\n  });\n}\n\ninterface MapStateProps {\n  user: UserState\n}\n\ntype MyProps = MapStateProps & { classes: any }\ninterface MyState { }\n\nclass Login extends React.Component<MyProps, MyState> {\n\n  render() {\n    const { isLoggedIn } = this.props.user\n    if (isLoggedIn) {\n      return <Redirect to={{ pathname: '/pay' }} />\n    }\n    const { classes } = this.props\n    return (\n      <Paper className={classes.root} elevation={1}>\n        <Typography variant=\"h5\" component=\"h3\" style={{ paddingBottom: '20px' }}>\n          ようこそ IB Wallet へ！！\n        </Typography>\n        <MyGoogleLogin />\n      </Paper>\n    )\n  }\n}\n\nconst mapState = (state: State): MapStateProps => {\n  log(\"mapState\", state)\n  return ({\n    user: state.user\n  })\n}\n\nexport const PageLogin = connect(mapState)(withStyles(styles)(Login));\n","import * as React from 'react';\nimport { connect } from 'react-redux'\nimport { Grid, Typography, Theme, withStyles, Paper, Button, Dialog, Slide, DialogTitle, DialogContent, DialogActions, DialogContentText } from '@material-ui/core';\nimport { GoogleLogout } from 'react-google-login';\nimport { UserState } from '../common/reducer';\nimport { AmplifyBridge } from '../common/Amplify';\nimport store from '../common/store';\n\nconst ReactCopyButtonWrapper = require('react-copy-button-wrapper')\n\nlet debug = require('debug')\nlet log = debug('[PAGE]{/account}');\n\ninterface MyProps {\n  user: UserState\n  classes: any\n}\ninterface MyState {\n  copyMessage?: string\n  copyDiaglogOpen: boolean,\n  logoutDialogOpen: boolean\n}\nconst styles = (theme: Theme) => ({\n  accountroot: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n  },\n  button: {\n    margin: theme.spacing.unit,\n  },\n  mypaper: {\n    margin: theme.spacing.unit,\n  }\n})\n\nclass Page extends React.Component<MyProps, MyState> {\n\n  constructor(props: MyProps) {\n    super(props)\n    this.state = {\n      copyDiaglogOpen: false,\n      logoutDialogOpen: false,\n    }\n  }\n\n  render() {\n    log('render')\n    const { user, classes } = this.props\n    const { address } = user\n    // const handleOnSuccessLogout = this.props.actions.onSuccessGoogleLogout\n\n    return (\n      <Grid\n        container\n        direction='column'\n        justify=\"space-between\"\n        alignItems=\"stretch\"\n        style={{ padding: '15px 15px 0px 15px' }}>\n        <AddresPaper\n          address={address}\n          classes={classes}\n          onAfterCopy={this.onAfterCopy}\n          onErrorCopy={this.onErrorCopy} />\n        <GooglePaper\n          classes={classes}\n          onClick={this.handleClickLogout} />\n        <MyDialog\n          copyDiaglogOpen={this.state.copyDiaglogOpen}\n          copyMessage={this.state.copyMessage}\n          handleClose={this.handleClose} />\n        <LogoutDialog\n          logoutDialogOpen={this.state.logoutDialogOpen}\n          handleLogoutClose={this.handleLogoutClose}\n          onSuccessLogout={this.handleOnSuccessLogout} />\n      </Grid>\n    )\n  }\n\n  handleOnSuccessLogout = () => {\n    new AmplifyBridge(store).logout();\n  }\n\n  openLogoutDialog = (open: boolean): void => {\n    this.setState({ logoutDialogOpen: open })\n  }\n  handleClickLogout = () => {\n    this.openLogoutDialog(true)\n  }\n  handleLogoutClose = () => {\n    this.openLogoutDialog(false)\n  }\n\n  openCopyDialog = (open: boolean, message?: string): void => {\n    this.setState({\n      copyMessage: message,\n      copyDiaglogOpen: open\n    })\n  }\n  handleClose = () => {\n    this.openCopyDialog(false)\n  }\n  onAfterCopy = () => {\n    this.openCopyDialog(true, 'Address をクリップボードにコピーしました')\n  }\n  onErrorCopy = () => {\n    this.openCopyDialog(true, 'クリップボードへのコピーが失敗しました')\n  }\n}\n\n// -----------------\n\nconst mapState = (state: any): any => {\n  log(\"mapState\", state)\n  return ({\n    user: state.user\n  })\n}\n\nconst mapDispatch = (dispatch: any) => ({\n  // actions: new ActionDispatcher(dispatch)\n})\n\nexport const PageAccount = connect(mapState, mapDispatch)(withStyles(styles)(Page))\n\n// -----------------\n\nconst LogoutDialog: React.FC<{ logoutDialogOpen: boolean, handleLogoutClose: () => void, onSuccessLogout: () => void }> = (props) => {\n  const { logoutDialogOpen, handleLogoutClose, onSuccessLogout } = props\n  return (\n    <Dialog\n      open={logoutDialogOpen}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleLogoutClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n    >\n      <DialogTitle id=\"alert-dialog-slide-title\">{\"ログアウト確認\"}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-slide-description\">\n          ログアウトしますか？\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleLogoutClose} color=\"primary\">\n          キャンセル\n        </Button>\n        <GoogleLogout onLogoutSuccess={onSuccessLogout} render={(props?: { onClick: () => void }) => {\n          return (\n            <Button variant=\"contained\" color=\"secondary\" onClick={!!props ? props.onClick : () => { }}>\n              ログアウト\n            </Button>\n          )\n        }}>\n        </GoogleLogout>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nconst MyDialog: React.FC<{ copyDiaglogOpen: boolean, handleClose: () => void, copyMessage?: string }> = (props) => {\n  const { copyDiaglogOpen, handleClose, copyMessage } = props\n  return (\n    <Dialog\n      open={copyDiaglogOpen}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n    >\n      <DialogTitle id=\"alert-dialog-slide-title\">{\"Information\"}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-slide-description\">\n          {copyMessage}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"contained\" onClick={handleClose} color=\"primary\">\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\nconst AddresPaper: React.FC<{ address?: string, classes: any, onAfterCopy: () => void, onErrorCopy: () => void }> = (props) => {\n  const { address, classes, onAfterCopy, onErrorCopy } = props\n  return (\n    <Grid item xs={12} className={classes.mypaper}>\n      <Paper className={classes.accountroot} elevation={1}>\n        <Typography variant=\"h5\" component=\"h3\">Address</Typography>\n        <Typography component=\"p\" style={{ wordWrap: 'break-word' }}>{address}</Typography>\n        <ReactCopyButtonWrapper text={address} onAfterCopy={onAfterCopy} onErrorCopy={onErrorCopy}>\n          <Button variant=\"outlined\" className={classes.button}>Copy</Button>\n        </ReactCopyButtonWrapper>\n      </Paper>\n    </Grid>\n  )\n}\n\nconst GooglePaper: React.FC<{ classes: any, onClick: () => void }> = (props) => {\n  const { classes, onClick } = props\n  return (\n    <Grid item xs={12} className={classes.mypaper}>\n      <Paper className={classes.accountroot} elevation={1}>\n        <div onClick={onClick}>\n          <Button variant=\"contained\" color=\"secondary\" className={classes.button}>ログアウト</Button>\n        </div>\n      </Paper>\n    </Grid>\n  )\n}\n\n\nfunction Transition(props: any) {\n  return <Slide direction=\"up\" {...props} />;\n}\n","import * as React from 'react'\nimport { Route, Redirect } from \"react-router-dom\"\nimport { connect } from 'react-redux';\nimport { Paper, Typography, withStyles } from '@material-ui/core';\nimport { haveLoggedIn } from '../common/localStorage';\nimport { UserState } from '../common/reducer';\n// import AuthService from './services/AuthService'  // ログインチェックを行うサービス.\n\nlet debug = require('debug')\nlet log = debug('[PAGE]{PRIVATE}');\nlog.log = console.log.bind(console);\n\nconst styles = (theme: any) => {\n  return ({\n    root: {\n      ...theme.mixins.gutters(),\n      paddingTop: theme.spacing.unit * 2,\n      paddingBottom: theme.spacing.unit * 2,\n      textAlign: 'center',\n      marginTop: theme.spacing.unit * 4,\n      marginLeft: theme.spacing.unit * 2,\n      marginRight: theme.spacing.unit * 2,\n    },\n  });\n}\n\ninterface MapStateProps {\n  isLoggedIn: boolean\n  isLogout: boolean\n}\n\ntype MyProps = { classes: any, component: any } & MapStateProps\n\ninterface MyStates {\n  timeout: boolean\n}\n\n\nclass MyRoute extends React.Component<MyProps, MyStates> {\n\n  private timer: any\n\n  constructor(props: MyProps) {\n    super(props)\n    this.state = {\n      timeout: false\n    }\n\n    this.clearTimer = this.clearTimer.bind(this)\n  }\n\n  componentDidMount() {\n    log('componentDidMount')\n\n    const { loggedIn, lastLoggedIn } = haveLoggedIn()\n    log('componentDidMount', loggedIn, lastLoggedIn)\n\n    // const { isLoggedIn } = this.props\n    // if (!loggedIn) {\n      this.timer = window.setTimeout(() => {\n        const { isLoggedIn } = this.props\n        if (!isLoggedIn) {\n          log('timeout: true')\n          this.setState({ timeout: true })\n        } else {\n          log('timeout: false')\n        }\n      }, loggedIn ? 10000: 5000)\n    // }\n  }\n\n  componentWillUnmount() {\n    log('componentWillUnmount')\n    this.clearTimer()\n  }\n\n  clearTimer() {\n    log('clearTimeout')\n    if (!!this.timer) {\n      log('clearTimeout !!this.timer === true')\n      window.clearTimeout(this.timer)\n      this.timer = undefined\n    }\n  }\n\n  render() {\n\n    log('render', this.props)\n    const { isLogout } = this.props\n    // 過去にログイン成功していない場合はログイン画面にリダイレクトする\n    // 過去にログイン成功している場合は、ログイン処理の結果を待つ\n    if (isLogout) {\n      this.clearTimer()\n      return <Redirect to={{ pathname: '/login', state: { from: (this.props as any).location } }} />\n    }\n\n\n    const { isLoggedIn } = this.props\n    const { timeout } = this.state\n    // ログインチェック前なら、ローディングを表示.\n    if (!isLoggedIn && !timeout) {\n      const { classes } = this.props\n\n      return (\n        < Paper className={classes.root} elevation={1} >\n          <Typography variant=\"h5\" component=\"h3\" style={{ paddingBottom: '20px' }}>\n            ようこそ IB Wallet へ！！\n          </Typography>\n          <Typography variant=\"h5\" component=\"h3\" style={{ paddingBottom: '20px' }}>\n            ログイン処理中です。\n          </Typography>\n        </Paper >\n      )\n    }\n\n    this.clearTimer()\n    const { component: Component, ...rest } = this.props\n    return (\n      <Route {...rest} render={() => {\n        // 過去にログイン成功しているが、ログイン処理がタイムアウトした場合はログイン画面にリダイレクト.\n        // ログイン処理が失敗した場合はタイムアウトを待つ（TODO: 即時ログイン画面に遷移できないか？）\n        if (timeout) {\n          return <Redirect to={{ pathname: '/login', state: { from: (this.props as any).location } }} />\n        }\n        // ログイン処理が成功した場合\n        return <Component {...this.props} />\n      }}\n      />\n    )\n  }\n}\n\n// export default PrivateRoute\n\nconst mapState = (state: UserState, routerProps: any): MapStateProps => {\n  let { user } = state\n  log(\"mapState\", user, routerProps)\n  return ({\n    isLoggedIn: user.isLoggedIn,\n    isLogout: user.isLogout,\n  })\n}\n\n/** 資産表示コンポーネント */\nexport const PrivateRoute = connect(mapState)(withStyles(styles)(MyRoute))\n","import * as React from 'react'\nimport { ChangeEventHandler } from \"react\";\nimport { TextField, withStyles, Grid, Button, Paper, WithStyles } from \"@material-ui/core\";\n\nlet debug = require('debug')\nlet log = debug('InputAsset');\nlog.log = console.log.bind(console);\n\nconst styles: any = (theme: any) => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  },\n  dense: {\n    marginTop: 16,\n  },\n  menu: {\n    width: 200,\n  },\n  addButton: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  }\n})\n\nexport interface SendAsset {\n  address: string\n  qty: number\n}\n\ninterface MyProps {\n  address?: string\n  assetName: string\n  destinationAddress?: string\n  qty?: number\n  onClick?: (value: SendAsset) => void\n  onChange?: () => void\n  classes: any\n  disabledButton: boolean\n}\n\ninterface MyState {\n  check: boolean\n  to: string\n  qty: number\n}\n\nclass Component extends React.Component<MyProps, MyState> {\n\n  constructor(props: MyProps) {\n    super(props)\n    this.state = {\n      check: false,\n      to: props.address ? props.address : '',\n      qty: Math.max(0, props.qty !== undefined ? props.qty : 0)\n    }\n    this.componentWillReceiveProps = this.componentWillReceiveProps.bind(this)\n    this.render = this.render.bind(this)\n  }\n\n  componentWillReceiveProps(props: Readonly<MyProps>) {\n    log('componentWillReceiveProps', props)\n    const { address, qty } = props\n    if ((address !== undefined && qty !== undefined) && (this.state.to !== address || this.state.qty !== qty)) {\n      this.setState({\n        to: address ? address : '',\n        qty: qty !== undefined ? qty : 0\n      })\n    } else {\n      log('componentWillReceiveProps 変更なし')\n    }\n  }\n\n  render() {\n    const { classes } = this.props\n    return (\n      <Grid item xs={12}>\n        <Grid item xs={12}>\n          <form className={classes.container} noValidate autoComplete=\"off\">\n            <TextField\n              required\n              id=\"outlined-required\"\n              label=\"宛先アドレス\"\n              // defaultValue=\"\"\n              className={classes.textField}\n              margin=\"normal\"\n              variant=\"outlined\"\n              fullWidth\n              value={this.state.to}\n              onChange={this.handleChangeAddress}\n            />\n            <TextField\n              id=\"outlined-number\"\n              label={this.props.assetName}\n              value={this.state.qty}\n              onChange={this.handleChangeQty}\n              type=\"number\"\n              className={classes.textField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              margin=\"normal\"\n              variant=\"outlined\"\n              fullWidth\n            />\n          </form>\n        </Grid>\n        <Grid item xs={12}>\n          <Paper style={{ textAlign: 'center', padding: '8px' }}>\n            <AddButtons values={[1000, 100, 10, 1]} className={classes.addButton} prefix={''} clickHandler={this.handleClickSet} />\n          </Paper>\n          <Paper style={{ textAlign: 'center', padding: '8px' }}>\n            <AddButtons values={[1000, 100, 10, 1]} className={classes.addButton} prefix={'+'} clickHandler={this.handleClickAdd} />\n          </Paper>\n          <Paper style={{ textAlign: 'center', padding: '8px' }}>\n            <AddButtons values={[-1000, -100, -10, -1]} className={classes.addButton} prefix={''} clickHandler={this.handleClickAdd} />\n          </Paper>\n          <Paper style={{ textAlign: 'center', padding: '8px' }}>\n            <Button\n              onClick={this.handleClick}\n              disabled={!this.state.check || this.props.disabledButton}\n              variant=\"contained\" color=\"secondary\"\n            >\n              コイン送信（確認ダイアログ表示）\n            </Button>\n          </Paper>\n        </Grid>\n      </Grid >\n    )\n  }\n\n  // ------------------------\n  // handlers\n  // ------------------------\n  private handleClickAdd = (value: number) => {\n    log('handleClickAdd', value)\n    this.setQty(this.state.qty + value)\n  }\n\n  private handleClickSet = (value: number) => {\n    log('handleClickSet', value)\n    this.setQty(value)\n  }\n\n  private setQty = (qty: number): void => {\n    this.setState({\n      check: (0 < this.state.to.length) && (0 < qty),\n      qty: Math.max(0, qty)\n    })\n  }\n\n  private handleClick = () => {\n    log('on click send button')\n    if (this.props.onClick) {\n      const { to, qty } = this.state\n      if (!to || to.length === 0 || !qty || qty <= 0) return\n      this.props.onClick({ address: to, qty: qty })\n    }\n  }\n\n  private handleChangeAddress: ChangeEventHandler = (event: { target: any }): void => {\n    let { value } = event.target\n    this.setState({\n      check: (value && 0 < value.length) && (0 < this.state.qty),\n      to: value\n    })\n    this.onChangeEvent()\n  }\n\n  private handleChangeQty: ChangeEventHandler = (event: { target: any }): void => {\n    let { value } = event.target\n    let qty = 1 * value\n    if (isNaN(qty)) {\n      qty = 1 * this.state.qty\n    }\n    this.setState({\n      check: (!!this.state.to && 0 < this.state.to.length) && (0 < qty),\n      qty: qty\n    })\n    this.onChangeEvent()\n  }\n\n  private onChangeEvent = () => {\n    if (this.props.onChange) {\n      this.props.onChange()\n    }\n  }\n}\n\ninterface AddButtonsProps {\n  values: Array<number>\n  className: string\n  prefix: string\n  clickHandler: (value: number) => void\n}\n\nconst AddButtons: React.FC<AddButtonsProps> = (props) => {\n  const { values, className, prefix, clickHandler } = props\n  const items = values.map((value, index) => {\n    return <AddButton value={value} text={`${prefix}${value}`} onClick={() => clickHandler(value)} className={className} key={`add-${index}-${value}`}/>\n  })\n  return (\n    <React.Fragment>\n      {items}\n    </React.Fragment>\n  )\n}\n\ninterface AddBUttonProps {\n  value: number\n  text: string\n  onClick: (value: number) => void\n  className: string\n}\n\nconst AddButton: React.FC<AddBUttonProps> = (props) => {\n  const { className, text, onClick, value } = props\n  return (\n    <Button\n      onClick={() => onClick(value)}\n      variant=\"contained\" color=\"primary\"\n      className={className}\n    >\n      {text}\n    </Button>\n  )\n}\n\nexport const InputAsset = withStyles(styles)(Component)\n","//\n// 送金画面(transfer)\n// path: /transfer\n//\n\nimport * as React from 'react';\nimport { connect } from 'react-redux'\nimport { Grid, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Slide, Typography } from '@material-ui/core';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { Hub } from 'aws-amplify';\nimport { UserState, State } from '../common/reducer';\nimport { SendAssetParams, SendAssetSuccess } from '../common/wallet/sendasset';\nimport { MyAccount } from '../components/AddressAssetTable';\nimport { IBWallet } from '../common/IBWallet';\nimport { InputAsset, SendAsset } from '../components/InputAsset';\n\nlet debug = require('debug')\nlet log = debug('PageTransfer');\nlog.log = console.log.bind(console);\n\ninterface MapStateProps {\n  user: UserState\n  toAddress?: string\n}\ninterface MapDispatchProps {\n  sendCoinAction: (params: SendAssetParams) => void\n}\n\ntype PageProps = MapStateProps & MapDispatchProps;\n\ninterface PageState {\n  disabledConfirm: boolean\n  dialog: boolean\n  dialogMessage: string\n  send?: SendAssetParams\n  address?: string\n  qty?: number\n  resultDialog: boolean\n  resultMessage: string\n}\n\nclass Page extends React.Component<PageProps, PageState> {\n\n  constructor(props: PageProps) {\n    super(props)\n    log('constructor')\n    this.state = {\n      disabledConfirm: false,\n      dialog: false,\n      dialogMessage: '',\n      resultDialog: false,\n      resultMessage: '',\n      address: props.toAddress\n    }\n\n  }\n  componentDidMount() {\n    Hub.listen('sendAsset', this)\n  }\n  onHubCapsule = (capsule: any) => {\n    log('onHubCapsule', capsule)\n    //{channel: \"sendAsset\", payload: {event: \"success\", data: {…}}, source: \"IBWallet\"}\n    const { payload } = capsule\n    const { event } = payload\n    if (event === 'start') {\n      log('送信開始')\n    } else if (event === 'success') {\n      this.onSuccessSendAsset(payload.data)\n    } else {\n      this.onFailureSendAsset(payload.errorMessage)\n    }\n  }\n\n  componentWillUnmount() {\n    // リスナーを削除する\n    Hub.remove('sendAsset', this)\n  }\n\n  render() {\n    log('render')\n\n    const { address } = this.props.user\n    let add = ''\n    if (address) {\n      add = address.substr(0, Math.min(address.length, 10)) + '.....'\n    }\n\n    const toAddress = this.state.address ? this.state.address : this.props.toAddress\n\n    return (\n      <Grid\n        container\n        direction='column'\n        justify=\"space-between\"\n        alignItems=\"stretch\">\n        <Grid item xs={12}>\n          <MyAccount address={add} />\n        </Grid>\n        <Grid item xs={12} style={{ marginTop: '10px' }}>\n          <Typography variant=\"subtitle1\" color=\"inherit\" style={{ textAlign: 'center' }}>コインを送信</Typography>\n          <InputAsset\n            assetName='IBC'\n            onClick={this.handleClickConfirm}\n            disabledButton={this.state.disabledConfirm}\n            onChange={this.handleOnChangeAsset}\n            address={toAddress}\n            qty={this.state.qty}\n          />\n        </Grid>\n        <MyDialog\n          dialog={this.state.dialog}\n          handleClose={this.handleClose}\n          dialogMessage={this.state.dialogMessage}\n          handleCancel={this.handleCancel}\n          handleOk={this.handleOk}\n        />\n        <ResultDialog\n          resultDialog={this.state.resultDialog}\n          handleCloseResultDialog={this.handleCloseResultDialog}\n          resultMessage={this.state.resultMessage}\n        />\n      </Grid>\n    )\n  }\n  handleClickConfirm = (value: SendAsset) => {\n    log('handleClickConfirm', value)\n    const { address, qty } = value\n    let message = address + ' に ' + qty + ' [ IBC ] を送信します'\n    const sendParams: SendAssetParams = {\n      to: address,\n      qty: qty,\n      assetName: 'ibcoin',\n      fromAddress: '' + this.props.user.address\n    }\n    this.setState({\n      disabledConfirm: true,\n      dialog: true,\n      dialogMessage: message,\n      send: sendParams,\n      address: address,\n      qty: qty\n    })\n  }\n  handleOnChangeAsset = () => {\n    if (this.state.disabledConfirm) {\n      log('handleOnChangeAsset')\n      this.setState({\n        disabledConfirm: false\n      })\n    }\n  }\n\n  closeResultDialog = () => {\n    this.setState({\n      resultDialog: false\n    })\n  }\n  handleCloseResultDialog = () => {\n    this.closeResultDialog()\n  }\n  // -----------------\n\n  handleClose = () => {\n    this.setState({\n      disabledConfirm: false,\n      dialog: false\n    })\n  }\n  handleCancel = () => {\n    log(\"handleCancel ============= キャンセル！！\")\n    this.setState({\n      dialog: false,\n      dialogMessage: '',\n      disabledConfirm: false,\n    })\n  }\n  handleOk = () => {\n    log(\"handleOk ============= 送信！！\")\n    this.setState({\n      dialog: false,\n      dialogMessage: '',\n      disabledConfirm: false,\n    })\n    if (!!this.state.send) {\n      this.props.sendCoinAction(this.state.send)\n    }\n  }\n  onReceiveResult = (err: string, result: SendAssetSuccess): void => {\n    if (!!result) {\n      const resId = result.resId\n      if (resId && (resId as any).errorMessage) {\n        // 送信失敗\n        this.onFailureSendAsset((resId as any).errorMessage as string)\n\n      } else {\n        this.onSuccessSendAsset(result)\n      }\n    } else {\n      this.onFailureSendAsset(err)\n    }\n\n  }\n  onSuccessSendAsset = (result: SendAssetSuccess) => {\n    this.showResultDialog('送信成功')\n    this.clearAsset()\n  }\n  onFailureSendAsset = (err: string) => {\n    // 送信失敗\n    this.showResultDialog(`送信失敗 [ ${err} ]`)\n\n  }\n  showResultDialog = (message: string) => {\n    this.setState({\n      resultDialog: true,\n      resultMessage: message\n    })\n  }\n  clearAsset = () => {\n    this.setState({\n      address: ' ',\n      qty: 0\n    })\n  }\n\n}\n// ---------------------------------------------\n// Component\n// ---------------------------------------------\n\nconst Transition: React.FC<any> = (props) => {\n  return <Slide direction=\"up\" {...props} />;\n}\n\ninterface MyDialogProps {\n  dialog: boolean,\n  handleClose: () => void,\n  dialogMessage: string,\n  handleCancel: () => void,\n  handleOk: () => void\n}\nconst MyDialog: React.FC<MyDialogProps> = (props) => {\n  const { dialog, handleClose, dialogMessage, handleCancel, handleOk } = props\n  return (\n    <Dialog\n      open={dialog}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n    >\n      <DialogTitle id=\"alert-dialog-slide-title\">{\"Information\"}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-slide-description\">\n          {dialogMessage}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleCancel} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={handleOk} color=\"secondary\" variant=\"contained\">\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\ninterface ResultDialogProps {\n  resultDialog: boolean,\n  handleCloseResultDialog: () => void\n  resultMessage: string\n}\nconst ResultDialog: React.FC<ResultDialogProps> = (props) => {\n  const { resultDialog, handleCloseResultDialog, resultMessage } = props\n  return (\n    <Dialog\n      open={resultDialog}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleCloseResultDialog}\n      aria-labelledby=\"alert-dialog-slide-title\"\n      aria-describedby=\"alert-dialog-slide-description\"\n    >\n      <DialogTitle id=\"alert-dialog-slide-title\">{\"Information\"}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-slide-description\">\n          {resultMessage}\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleCloseResultDialog} color=\"primary\">\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\n// ---------------------------------------------\n// Redux\n// ---------------------------------------------\n\nconst mapState = (state: State, routerProps: RouteComponentProps<{}>): MapStateProps => {\n  log(\"mapState\", state, routerProps)\n  return ({\n    user: state.user,\n    toAddress: routerProps.location.state\n  })\n}\n\nconst mapDispatch = (dispatch: any): MapDispatchProps => {\n  return {\n    sendCoinAction: new IBWallet(dispatch).sendAsset\n  }\n}\n\nexport const PageTransfer = withRouter(connect(mapState, mapDispatch)(Page))","import { IBCoupon as API } from './wallet'\nimport { IBCouponAction, Actions } from './actions';\nimport { Dispatch } from 'redux';\n\nlet debug = require('debug')\nlet info = debug('IBCoupon[INFO]');\nlet error = debug('IBCoupon[ERR]');\n\nexport type claimPaperAsset = (code: string, qty: number) => void;\n\n/**\n * IB Coupon\n *\n * @export\n * @class IBCoupon\n */\nexport class IBCoupon {\n\n  /**\n   * dispatch\n   *\n   * @private\n   * @type {Dispatch<Actions>}\n   * @memberof IBCoupon\n   */\n  private dispatch: Dispatch<Actions>;\n\n  /**\n   * Creates an instance of IBCoupon.\n   * @param {Dispatch<Actions>} dispatch\n   * @memberof IBCoupon\n   */\n  constructor(dispatch: Dispatch<Actions>) {\n    this.dispatch = dispatch;\n\n  }\n\n  /**\n   * 1. クーポンコードからアドレスと金額を取得する\n   *\n   * @memberof IBCoupon\n   */\n  public getPaperBalance = (code: string) => {\n    API.paperBalance(code)\n      .then(this.getPaperBalanceSuccess)  // 1.1\n      .catch(this.getPaperBalanceError)   // 1.2\n  }\n\n  /**\n   * 1.1 成功）クーポンコードからアドレスと金額を取得する\n   *\n   * @private\n   * @memberof IBCoupon\n   */\n  private getPaperBalanceSuccess = (value: { address: string, code: string, qty: number }) => {\n    info(value)\n    this.dispatch(IBCouponAction.updateCoupon(value))\n  }\n  /**\n   * 1.2 失敗）クーポンコードからアドレスと金額を取得する\n   *\n   * @private\n   * @memberof IBCoupon\n   */\n  private getPaperBalanceError = (err: any) => {\n    error(err)\n    this.dispatch(IBCouponAction.updateCoupon({ address: '', code: '', qty: -1 }))\n  }\n\n  /**\n   * 2 クーポンの資産を自分のアドレス宛に送金を要求\n   *\n   * @memberof IBCoupon\n   */\n  public claimPaperAsset: claimPaperAsset = (code: string, qty: number) => {\n    API.claimPaperAsset(code, qty)\n      .then(this.claimPaperAssetSuccess)  // 2.1\n      .catch(this.claimPaperAssetError)   // 2.2\n  }\n\n  /**\n   * 2.1 成功）クーポンの資産を自分のアドレス宛に送金を要求\n   *\n   * @private\n   * @memberof IBCoupon\n   */\n  private claimPaperAssetSuccess = (value: any) => {\n    info(value)\n    // this.dispatch(IBCouponAction.updateCoupon(value))\n  }\n  /**\n   * 2.2 失敗）クーポンの資産を自分のアドレス宛に送金を要求\n   *\n   * @private\n   * @memberof IBCoupon\n   */\n  private claimPaperAssetError = (err: any) => {\n    error(err)\n    // this.dispatch(IBCouponAction.updateCoupon({ address: '', code: '', qty: -1 }))\n  }\n}\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { Grid, Paper, withStyles, Button, TextField } from '@material-ui/core'\nimport { RouteComponentProps } from 'react-router';\nimport { withRouter } from 'react-router-dom'\nimport { ChangeEventHandler } from \"react\";\nimport { CouponState, State } from '../common/reducer';\nimport { IBCoupon } from '../common/IBCoupon';\n\nlet debug = require('debug')\nlet log = debug('[PAGE]{/claim}');\n\nconst styles: any = (theme: any) => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  },\n  dense: {\n    marginTop: 16,\n  },\n  menu: {\n    width: 200,\n  },\n  addButton: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n  }\n})\n\ninterface MapStateProps {\n  code: string\n  coupon: CouponState\n}\ninterface MapDispatchProps {\n  paperAction: (code: string, qty: number) => void\n  getPaperInfo: (code: string) => void\n}\ntype PageProps = { classes: any } & MapStateProps & MapDispatchProps\n\ninterface PageState {\n  qty: number\n  check: boolean\n}\nexport interface SendAsset {\n  code: string\n  qty: number\n}\n\nclass Page extends React.Component<PageProps, PageState> {\n\n  constructor(props: PageProps) {\n    super(props)\n    this.state = {\n      qty: 0,\n      check: false,\n    }\n  }\n\n  componentDidMount() {\n    log('componentDidMount()')\n    this.props.getPaperInfo(this.props.code)\n  }\n\n  componentWillReceiveProps() {\n    const { coupon } = this.props\n    this.setState({\n      check: !!coupon.address && (0 < this.state.qty),\n    })\n  }\n  render() {\n    log('render props:', this.props)\n\n    const { classes } = this.props\n    return (\n      <Grid item xs={12}>\n        <Grid item xs={12}>\n          <form className={classes.container} noValidate autoComplete=\"off\">\n            <TextField\n              required\n              id=\"outlined-required\"\n              label=\"請求先アドレス\"\n              // defaultValue=\"\"\n              className={classes.textField}\n              margin=\"normal\"\n              variant=\"outlined\"\n              fullWidth\n              value={this.props.coupon.address}\n              onChange={this.handleChangeAddress}\n            />\n            <TextField\n              id=\"outlined-number\"\n              label={'IBC'}\n              value={this.state.qty}\n              onChange={this.handleChangeQty}\n              type=\"number\"\n              className={classes.textField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              margin=\"normal\"\n              variant=\"outlined\"\n              fullWidth\n            />\n          </form>\n        </Grid>\n        <Grid item xs={12}>\n          <Paper style={{ textAlign: 'center', padding: '8px' }}>\n            <Button\n              onClick={this.handleClick}\n              disabled={!this.state.check}\n              variant=\"contained\" color=\"secondary\"\n            >\n              請求\n              </Button>\n          </Paper>\n        </Grid>\n      </Grid >\n    )\n  }\n\n  // ------------------------\n  // handlers\n  // ------------------------\n  private handleClickAdd = (value: number) => {\n    log('handleClickAdd', value)\n    this.setQty(this.state.qty + value)\n  }\n\n  private handleClickSet = (value: number) => {\n    log('handleClickSet', value)\n    this.setQty(value)\n  }\n\n  private setQty = (qty: number): void => {\n    this.setState({\n      check: (0 < qty),\n      qty: Math.min(1000, Math.max(0, qty))\n    })\n  }\n\n  private handleClick = () => {\n    log('on click claim button')\n    const { code } = this.props\n    const { qty } = this.state\n    if (!code || code.length === 0 || !qty || qty <= 0) return\n    log('onClick params', { code, qty })\n    this.props.paperAction(code, qty)\n  }\n\n  private handleChangeAddress: ChangeEventHandler = (event: { target: any }): void => {\n    let { value } = event.target\n    this.setState({\n      check: (value && 0 < value.length) && (0 < this.state.qty),\n    })\n    // this.onChangeEvent()\n  }\n\n  private handleChangeQty: ChangeEventHandler = (event: { target: any }): void => {\n    let { value } = event.target\n    let qty = 1 * value\n    if (isNaN(qty)) {\n      qty = 1 * this.state.qty\n    }\n    this.setState({\n      check: (0 < qty),\n      qty: Math.min(1000, Math.max(0, qty))\n    })\n    // this.onChangeEvent()\n  }\n\n}\n\n// ---------------------------------------------\n// Component\n// ---------------------------------------------\n\n// ---------------------------------------------\n// Redux\n// ---------------------------------------------\n\nconst mapState = (state: State, routerProps: RouteComponentProps<{ code: string }>): MapStateProps => {\n  log(\"mapState\", state, routerProps)\n  return ({\n    // address: state.user.address,\n    code: routerProps.match.params.code,\n    // assetName: 'ibcoin',\n    coupon: state.coupon,\n\n  })\n}\nconst mapDispatch = (dispatch: any): MapDispatchProps => {\n  // const actionDispatcher = new ActionDispatcher(dispatch)\n  const actions = new IBCoupon(dispatch);\n  return {\n    paperAction: actions.claimPaperAsset,\n    getPaperInfo: actions.getPaperBalance,\n  }\n}\n\nexport const PageClaim = withRouter(connect(mapState, mapDispatch)(withStyles(styles)(Page)));","import * as React from \"react\";\nimport { Table, TableBody, TableRow, TableCell } from \"@material-ui/core\";\n\nexport const PaperTable: React.FC<{ address: string, qty: number }> = (props) => {\n  const { address, qty } = props\n  return (\n    <Table>\n      <TableBody>\n        <TableRow>\n          <TableCell component='th' scope=\"row\">Address</TableCell >\n          <TableCell align='right'>{address}</TableCell >\n        </TableRow>\n        <TableRow>\n          <TableCell component='th' scope=\"row\">Asset</TableCell >\n          <TableCell align='right'><div style={{ display: 'inline' }}>{0 + qty}</div></TableCell >\n        </TableRow>\n      </TableBody>\n    </Table>\n  )\n}\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { Grid, Paper, Typography, withStyles, Button } from '@material-ui/core'\nimport { RouteComponentProps, Redirect } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { UserState, CouponState, State } from '../common/reducer';\nimport { PaperTable } from '../components/PaperTable';\nimport { IBCoupon, claimPaperAsset } from '../common/IBCoupon';\n\nlet debug = require('debug')\nlet log = debug('PapgePaper');\nlog.log = console.log.bind(console)\n\n\ninterface MapStateProps {\n  user: UserState\n  code: string\n  copuon: CouponState\n}\ninterface MapDispatchProps {\n  paperAction: claimPaperAsset\n  getPaperInfo: (code: string) => void\n}\ntype PageProps = MapStateProps & MapDispatchProps\n\ninterface PageState {\n  address: string\n  qty: number\n  buttonText: string\n  loading: boolean\n  redirect: boolean\n  res?: any\n}\n\nclass Page extends React.Component<PageProps, PageState> {\n\n  constructor(props: PageProps) {\n    super(props)\n    this.state = {\n      address: `${props.user.address}`,\n      qty: 0,\n      buttonText: 'ペーパーアカウントからコインを取得する',\n      loading: true,\n      redirect: false\n    }\n  }\n\n  componentDidMount() {\n    log('componentDidMount()')\n    this.props.getPaperInfo(this.props.code)\n  }\n\n  componentWillReceiveProps() {\n  }\n\n  render() {\n    log('params:', this.props)\n    // const code = this.props.code\n    if (!this.state.loading && this.state.redirect) {\n      return <Redirect to={{ pathname: '/pay' }} />\n    }\n    let add = ''\n    if (!!this.props.copuon && !!this.props.copuon.address) {\n      add = this.props.copuon.address.substr(0, Math.min(this.state.address.length, 10)) + '.....'\n    }\n    let qty = 0\n    if (!!this.props.copuon && !!this.props.copuon.qty) {\n      qty = this.props.copuon.qty;\n    }\n    let disabled = !(!!add && 0 < add.length && 0 <= qty)\n\n    return (\n      <Grid\n        container\n        direction='column'\n        justify=\"space-between\"\n        alignItems=\"stretch\">\n        <Grid item xs={12}>\n          <PaperTable address={add} qty={qty} />\n        </Grid>\n        <Grid item xs={12} style={{ textAlign: 'center', margin: '20px' }}>\n          <Button\n            onClick={() => {\n              if (!this.state.res) { this.props.paperAction(this.props.code, this.state.qty) }\n              else { this.setState({ redirect: true }) }\n            }}\n            variant=\"contained\" color=\"primary\"\n            disabled={disabled}\n          >\n            {this.state.buttonText}\n          </Button><br />\n          <Link to={`/share/${this.props.copuon.address}/`}>\n            <Button variant=\"contained\" disabled={disabled} style={{ marginTop: '20px' }} >\n              この口座にチャージする\n              </Button>\n          </Link>\n\n        </Grid>\n      </Grid>\n    )\n  }\n\n}\n\n// ---------------------------------------------\n// Component\n// ---------------------------------------------\n\n// ---------------------------------------------\n// Redux\n// ---------------------------------------------\n\nconst mapState = (state: State, routerProps: RouteComponentProps<{ code: string }>): MapStateProps => {\n  log(\"mapState\", state, routerProps)\n  return ({\n    user: state.user,\n    code: routerProps.match.params.code,\n    copuon: state.coupon,\n  })\n}\nconst mapDispatch = (dispatch: any): MapDispatchProps => {\n  // const actionDispatcher = new ActionDispatcher(dispatch)\n  const actions = new IBCoupon(dispatch);\n  return {\n    paperAction: actions.claimPaperAsset,\n    getPaperInfo: actions.getPaperBalance,\n  }\n}\n\nexport const PagePaper = connect(mapState, mapDispatch)(Page)","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { Router, Switch, Route, Redirect } from 'react-router';\n\nimport store from './common/store';\nimport browserHistory from './common/history';\nimport { Grid, CssBaseline } from '@material-ui/core';\nimport { HashRouter } from 'react-router-dom';\nimport { MyAppBar } from './components/AppBar';\nimport { BottomAppBar } from './components/BottomAppBar';\nimport { PageNoMatch } from './pages/PageNoMatch';\nimport { PagePay } from './pages/PagePay';\nimport { PageLogin } from './pages/PageLogin';\nimport { PageAccount } from './pages/PageAccount';\nimport { PrivateRoute } from './pages/PrivateRoute';\nimport { MyGoogleLogin } from './components/MyGoogleLogin';\nimport { PageTransfer } from './pages/PageTransfer';\nimport { PageClaim } from './pages/PageClaim';\nimport { PagePaper } from './pages/PagePaper';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Router history={browserHistory}>\n          <Grid\n            container\n            direction='column'\n            justify=\"space-between\"\n            alignItems=\"stretch\">\n            <CssBaseline />\n            <HashRouter>\n              <div style={{ height: '100%', paddingBottom: '60px' }}>\n                <MyAppBar />\n                <Switch>\n                  <Route exact path=\"/\" render={() => <Redirect to={{ pathname: '/pay' }} />} />\n                  <Route path=\"/login\" component={PageLogin} />\n                  <Route path=\"/paper/:code?\" component={PagePaper} />\n                  <PrivateRoute path=\"/account\" component={PageAccount} />\n                  <PrivateRoute path=\"/pay\" component={PagePay} />\n                  <Route path=\"/claim/:code?\" component={PageClaim} />\n                  <PrivateRoute path=\"/transfer\" component={PageTransfer} />\n                  <Route path=\"/share/:address?\" render={(props: any) => <Redirect to={{ pathname: '/transfer', state: props.match.params.address }} />} />\n                  <Route component={PageNoMatch} />\n                </Switch>\n                <BottomAppBar />\n              </div>\n            </HashRouter>\n            <div style={{ display: 'none' }}>\n              <MyGoogleLogin />\n            </div>\n          </Grid>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport amplifyConfigure from './config/amplify';\nimport { Logger } from 'aws-amplify';\n\n// Debug flag\nif (window.location.hostname.indexOf('localhost') >= 0) {\n  Logger.LOG_LEVEL = 'DEBUG';\n  console.log('hostname = ', window.location.hostname)\n  const flag = '*'\n  console.log('debug: ' + flag)\n  localStorage.setItem('debug', flag)\n} else {\n  // localStorage.removeItem('debug')\n}\n\n// AWS Access\namplifyConfigure();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","import Amplify from 'aws-amplify';\n\nexport default function amplifyConfigure() {\n  Amplify.configure({\n    'aws_appsync_authenticationType': 'OPENID_CONNECT',\n    Auth: {\n      identityPoolId: 'ap-northeast-1:ef403614-ab79-48bf-b699-96430a108dc6', //REQUIRED - Amazon Cognito Identity Pool ID\n      region: 'ap-northeast-1', // REQUIRED - Amazon Cognito Region\n      // OPTIONAL - Amazon Cognito User Pool ID\n      userPoolId: 'ap-northeast-1_kxPu6h5rk',\n      // OPTIONAL - Amazon Cognito Web Client ID\n      userPoolWebClientId: '14hcert5mg85d94j09e4608rof',\n    },\n    API: {\n      endpoints: [\n        {\n          name: \"IBCoin_User\",\n          endpoint: \"https://dmaqop4vpl.execute-api.ap-northeast-1.amazonaws.com/test\",\n          region: \"ap-northeast-1\"\n        }\n      ]\n    }\n  });\n}"],"sourceRoot":""}